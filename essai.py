# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Aude KOUASSY\venv\Projet_Vac\my_interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import photos_rc
import sqlite3
import random


from PyQt5 import QtCore, QtGui, QtWidgets
from affichage_binomage import Ui_Dialog
#from affichage_binomage import load_data

from part1 import Ui_Dialog as part1Dialog

#importation des fonctions de la table filleul
from home_fil import Ui_Dialog as menu_fil
from modif_fil import Ui_Dialog as m_fil
from supp_fil import Ui_Dialog as s_fil
from part3 import Ui_Dialog as part3Dialog #formulaire d'ajout d'informations filleul

#importation des fonctions de la table parrain
from home_par import Ui_Dialog as menu_par
from modif_par import Ui_Dialog as m_par
from supp_par import Ui_Dialog as s_par
from part2 import Ui_Dialog as part2Dialog #formulaire d'ajout d'informations parrain

from erreur import Ui_Dialog as faute

global conn,cur  # variable de connexion et du curseur de ma bd

conn = sqlite3.connect('Binoap.db') #connection à ma bdd
cur = conn.cursor()  #creation d'un curseur
cur.execute("DROP TABLE FILEULE ") #création de la table  avec ses colonnes
conn.commit()
#creation de deux tables dans ma bd
cur.execute("CREATE TABLE IF NOT EXISTS PARRAIN_MARRAINE(Matricule TEXT PRIMARY KEY, Nom TEXT, Prenom TEXT, Classe TEXT);") #création de la table  avec ses colonnes
conn.commit()
cur.execute("CREATE TABLE IF NOT EXISTS FILEULE(Id_fileule TEXT PRIMARY KEY,Matricule TEXT, Nom_F TEXT, Prenom_F TEXT, Classe_F TEXT, FOREIGN KEY(Matricule) REFERENCES PARRAIN_MARRAINE(Matricule));") #création de la table  avec ses colonnes
conn.commit()



class Ui_MainWindow(object): # debut de style de l'interface d'accueil de l'appli
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(577, 442)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.bg_frame = QtWidgets.QFrame(self.centralwidget)
        self.bg_frame.setGeometry(QtCore.QRect(150, 30, 221, 371))
        self.bg_frame.setStyleSheet("QFrame#bg_frame{\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(116, 0, 81, 255), stop:1 rgba(102, 64, 255, 255));\n"
"border-radius:40px;}")
        self.bg_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.bg_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.bg_frame.setObjectName("bg_frame")
        
        self.app_name = QtWidgets.QLabel(self.bg_frame)
        self.app_name.setGeometry(QtCore.QRect(30, 110, 161, 41))
        self.app_name.setStyleSheet("font: 30pt \"Forte\";")
        self.app_name.setObjectName("app_name")
        
        self.sml_messag = QtWidgets.QLabel(self.bg_frame)
        self.sml_messag.setGeometry(QtCore.QRect(40, 160, 161, 20))
        self.sml_messag.setStyleSheet("font: 25 italic 10pt \"Gill Sans Nova Light\";")
        self.sml_messag.setObjectName("sml_messag")
        
        self.butt_entrer = QtWidgets.QPushButton(self.bg_frame)
        self.butt_entrer.setGeometry(QtCore.QRect(50, 300, 111, 21))
        self.butt_entrer.setMaximumSize(QtCore.QSize(111, 23))
        self.butt_entrer.setStyleSheet("QPushButton{\n"
"color:qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(106, 0, 91, 255), stop:1 rgba(100, 60, 255, 255));\n"
"border-radius: 10px;\n"
"background-color:white;\n"
"font:10pt \"Verdana Pro Semibold\";\n"
"padding:18px;\n"
"}\n"
"QPushButton:hover{\n"
"border-top-color:#084870;\n"
"background:white;\n"
"color:#c910c9;\n"
"}\n"
"QPushButton:active{\n"
"border-top-color:#409ad6;\n"
"background:white;\n"
"}\n"
"")
        self.butt_entrer.setObjectName("butt_entrer")
        MainWindow.setCentralWidget(self.centralwidget)
        
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.pushButton = QtWidgets.QPushButton(self.bg_frame)
        self.pushButton.setGeometry(QtCore.QRect(180, 10, 31, 23))
        self.pushButton.setStyleSheet("background:transparent;")
        self.pushButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/C:/Users/Aude KOUASSY/Desktop/icones/effacer.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setObjectName("pushButton")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
#fin du style de l'interface d'acceuil de l'appli

    def retranslateUi(self, MainWindow):  #noms des widgets de mon interface
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Bienvenu(e) sur Bino\'App"))
        self.app_name.setText(_translate("MainWindow", "Bino\'App"))
        self.sml_messag.setText(_translate("MainWindow", "Le binômage devient plus facile."))
        self.butt_entrer.setText(_translate("MainWindow", "Entrer"))

#le vrai main de l'application

import sys

def menu(): #fonction pour montrer l'accueil afin de faire des choix
    part1.show()
    
def r():
    part1.showMinimized()
    
def menu_parrain(): #elle permet de montrer les choix dans la table parrain/marraine
    home_par.show()
    
def menu_filleul(): #elle permet de montrer les choix dans la table filleul/filleule
    home_fil.show()
    
def ajout_parrain(): #elle permet de montrer les choix dans la table parrain/marraine
    part2.show()
    
def ajout_filleul(): #elle permet de montrer les choix dans la table filleul/filleule
    part3.show()
    
def modif_parrain(): #elle permet de montrer les choix dans la table parrain/marraine
    modif_par.show()
    
def supp_parrain(): #elle permet de montrer les choix dans la table parrain/marraine
    supp_par.show() 
    
def modif_filleul(): #elle permet de montrer les choix dans la table filleul/filleule
    modif_fil.show()
    
def supp_filleul(): #elle permet de montrer les choix dans la table filleul/filleule
    supp_fil.show()

def binome():
    affichage_binomag.show()
    #load_data()  importation de la fonction du fichier affichage_binomage.py
    
def sortir(): #sortir de l'application  
    exit()
    
def print_error():
    er.show()

#creation d'une instance de QApplication   
app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)

part1 = QtWidgets.QDialog()
p1 = part1Dialog()
p1.setupUi(part1)

home_par = QtWidgets.QDialog()
hpar = menu_par()
hpar.setupUi(home_par)

home_fil = QtWidgets.QDialog()
hfil = menu_fil()
hfil.setupUi(home_fil)

part2 = QtWidgets.QDialog()
ajoutpar = part2Dialog()
ajoutpar.setupUi(part2)

part3 = QtWidgets.QDialog()
ajoutfil = part3Dialog()
ajoutfil.setupUi(part3)

modif_par = QtWidgets.QDialog()
mopar = m_par()
mopar.setupUi(modif_par)

supp_par = QtWidgets.QDialog()
supar = s_par()
supar.setupUi(supp_par)

modif_fil = QtWidgets.QDialog()
mofil = m_fil()
mofil.setupUi(modif_fil)

supp_fil = QtWidgets.QDialog()
sufil = s_fil()
sufil.setupUi(supp_fil)

er = QtWidgets.QDialog()
erreur = faute()
erreur.setupUi(er)

affichage_binomag = QtWidgets.QDialog()
list_bin = Ui_Dialog()
list_bin.setupUi(affichage_binomag)

# classe qui gère les mouvements dans la bd.  ex:modifier,supprimer...
class parrain:
    def add_parrain():

        m = ajoutpar.lineEdit_mat.text()
        n = ajoutpar.lineEdit_nom.text()
        p = ajoutpar.lineEdit_pre.text()
        c = ajoutpar.lineEdit_class.text()
        
        #ls caracteres et styles des infos insérées
        m = m.upper()
        n = n.upper()
        p = p.capitalize()
        c = c.upper()
        
        cur.execute("INSERT INTO PARRAIN_MARRAINE VALUES(?,?,?,?)",(m,n,p,c))       
        conn.commit()
        
        
    def set_parrain():
        
        m = mopar.lineEdit.text()
        m = m.upper()
        Liste = []
        cur.execute("SELECT Matricule FROM PARRAIN_MARRAINE")
        recup = cur.fetchall()  # variable qui stocke tous les matricules de ma bd
        
        for truc in recup:
            Liste.append(truc)
        #methode pour rendre en liste le tuple recup
        L = [x for el in Liste for x in el] #list comprehension
        
        while m not in L:
            print_error()
        
        else:
        
            ajout_parrain()            
            def modif():
                '''
                new_m = ajoutpar.lineEdit_mat.text()
                new_m = new_m.upper()
                cur.execute("UPDATE PARRAIN_MARRAINE SET Matricule= ? WHERE Matricule = ? ", (new_m,m))
                conn.commit()'''
                
                new_n = ajoutpar.lineEdit_nom.text()
                new_n = new_n.upper()
                print(new_n)
                cur.execute("UPDATE PARRAIN_MARRAINE SET Nom= ? WHERE Matricule = ? ", (new_n,m))
                conn.commit()
                
                new_p = ajoutpar.lineEdit_pre.text()
                new_p = new_p.capitalize()
                cur.execute("UPDATE PARRAIN_MARRAINE SET Prenom= ? WHERE Matricule = ? ", (new_p,m))
                conn.commit()
            
                new_c = ajoutpar.lineEdit_class.text()
                new_c = new_c.upper()
                cur.execute("UPDATE PARRAIN_MARRAINE SET Classe= ? WHERE Matricule = ? ", (new_c,m))
                conn.commit()
                
            ajoutpar.valider.clicked.connect(modif)
            
    def del_parrain():
                
        m = supar.lineEdit.text()
        m = m.upper()
        Liste = []
        cur.execute("SELECT Matricule FROM PARRAIN_MARRAINE")
        recup = cur.fetchall()
        
        for truc in recup:
            Liste.append(truc)
        #methode pour rendre en liste le tuple recup
        L = list(sum(Liste,())) 

        while m not in L:
            print_error()
        
        else: 
            cur.execute("DELETE FROM PARRAIN_MARRAINE WHERE Matricule = ? ", (m,))
            conn.commit()


# classe qui gère les mouvements dans la bd.  ex:ajouter,supprimer...
class filleul:
    def add_filleul():
        
#comme il s'agit d'une relation de type 1,n entre les tables de notre SII il y a 5 colonnes dans la table FILEULE alors je vais faire un tri dans une liste qui va stocker tous les matricules des parrains de ma bd et selectionner un pour y insérer en mm tmps qu'un filleul valide ses infos personnelles
        search_all_parrains = []
        cur.execute("SELECT Matricule FROM PARRAIN_MARRAINE")
        je_recueille = cur.fetchall()  # variable qui stocke tous les matricules de ma bd
        
        for chose in je_recueille:
            search_all_parrains.append(chose)
            
        #methode pour rendre en liste le tuple 'je_recueille'
        L = list(sum(search_all_parrains,()))
        Son_parrain = random.choice(L)
        Son_parrain = Son_parrain.upper()
        
        m = ajoutfil.lineEdit_mat.text()
        n = ajoutfil.lineEdit_nom.text()
        p = ajoutfil.lineEdit_pre.text()
        c = ajoutfil.lineEdit_class.text()
        
        #ls caracteres et styles des infos insérées
        m = m.upper()
        n = n.upper()
        p = p.capitalize()
        c = c.upper()
        
        cur.execute("INSERT INTO FILEULE VALUES(?,?,?,?,?)",(m,Son_parrain,n,p,c))       
        conn.commit()
        
        
    def set_filleul():
        
        Id = mofil.lineEdit.text()
        Id = Id.upper()
        Liste = []
        cur.execute("SELECT Id_fileule FROM FILEULE")
        req = cur.fetchall()  # variable qui stocke tous les matricules de ma bd
        
        for chose in req:
            Liste.append(chose)
        #methode pour rendre en liste le tuple resultat2
        L = list(sum(Liste,()))
        
        while Id not in L:
            print_error()
        
        else:
        
            ajout_fileul()            
            def modif():
                '''
                new_m = ajoutfil.lineEdit_mat.text()
                new_m = new_m.upper()
                cur.execute("UPDATE FILEULE SET Id_fileule= ? WHERE Id_fileule = ? ", (new_m,Id))
                conn.commit()'''
                
                new_n = ajoutfil.lineEdit_nom.text()
                new_n = new_n.upper()
                print(new_n)
                cur.execute("UPDATE FILEULE SET Nom_F= ? WHERE Id_fileule = ? ", (new_n,Id))
                conn.commit()
                
                new_p = ajoutfil.lineEdit_pre.text()
                new_p = new_p.upper()
                cur.execute("UPDATE FILEULE SET Prenom_F= ? WHERE Id_fileule = ? ", (new_p,Id))
                conn.commit()
            
                new_c = ajoutfil.lineEdit_class.text()
                new_c = new_c.upper()
                cur.execute("UPDATE FILEULE SET Classe_F= ? WHERE Id_fileule = ? ", (new_c,Id))
                conn.commit()
                
            ajoutfil.valider.clicked.connect(modif)
            
    def del_filleul():
                
        Id = sufil.lineEdit.text()
        Id = Id.upper()
        Liste = []
        cur.execute("SELECT Matricule FROM PARRAIN_MARRAINE")
        req = cur.fetchall()
        
        for chose in req:
            Liste.append(chose)
        #methode pour rendre en liste le tuple req
        L = list(sum(Liste,())) 

        while Id not in L:
            print_error()
        
        else:    
            cur.execute("DELETE FROM FILEULE WHERE Id_fileule = ? ", (Id,))
            conn.commit()
                        
#partie qui affiche les différentes interfaces de l'appli au clic d'un bouton

MainWindow.show()  #montrer la fenetre principale:accueil 
ui.butt_entrer.clicked.connect(menu) #au clic la fenetre du menu principal s'affiche
ui.pushButton.clicked.connect(sortir) #pour sortir completement de l'appli

#naviguer entre les options de la table parrain
p1.pushButton.clicked.connect(menu_parrain) #au clic la fenetre du menu sur les choix du parrain s'affiche
p1.pushButton_5.clicked.connect(sortir)
hpar.pushButtonpar.clicked.connect(ajout_parrain) #au clic la fenetre du menu sur les choix du parrain s'affiche
hpar.pushButton_2.clicked.connect(modif_parrain)
hpar.pushButton_3.clicked.connect(supp_parrain)
hpar.pushButton_7.clicked.connect(sortir)
ajoutpar.valider.clicked.connect(parrain.add_parrain)
supar.valider.clicked.connect(parrain.del_parrain)
mopar.valider.clicked.connect(parrain.set_parrain)


#naviguer entre les options de la table filleul
p1.pushButton_2.clicked.connect(menu_filleul) #au clic la fenetre du menu sur les choix du filleul s'affiche
hfil.pushButton.clicked.connect(ajout_filleul)
hfil.pushButton_2.clicked.connect(modif_filleul)
hfil.pushButton_3.clicked.connect(supp_filleul)
hfil.pushButton_6.clicked.connect(menu)
hfil.pushButton_7.clicked.connect(sortir)
ajoutfil.valider.clicked.connect(filleul.add_filleul)
sufil.valider.clicked.connect(filleul.del_filleul)

p1.pushButton_3.clicked.connect(binome)
list_bin.sortir.clicked.connect(sortir)


sys.exit(app.exec_()) #execution de l'appli
 
