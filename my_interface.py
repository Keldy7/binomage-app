# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Aude KOUASSY\venv\Projet_Vac\my_interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import photos_rc
import sqlite3
import random


from PyQt5 import QtCore, QtGui, QtWidgets

from affichage_binomage import Ui_Dialog  #page de l'affichage de la liste des binomages
from part1 import Ui_Dialog as part1Dialog  #page de menu principal
from form_set import Ui_Dialog as setter_page  # formulaire de modification d'informations

#importation des fonctions de la table filleul
from home_fil import Ui_Dialog as menu_fil  # formulaire menu du filleul
from modif_fil import Ui_Dialog as m_fil   #formulaire de modification d'informations filleul
from supp_fil import Ui_Dialog as s_fil  #formulaire de suppression d'informations filleul
from part3 import Ui_Dialog as part3Dialog #formulaire d'ajout d'informations filleul

#importation des fonctions de la table parrain
from home_par import Ui_Dialog as menu_par # formulaire menu du parrain
from modif_par import Ui_Dialog as m_par   #formulaire de modification d'informations parrain
from supp_par import Ui_Dialog as s_par  #formulaire de suppression d'informations parrain
from part2 import Ui_Dialog as part2Dialog #formulaire d'ajout d'informations parrain

global conn,cur  # variable de connexion et du curseur de ma bd

conn = sqlite3.connect('Binoap.db') #connection à ma bdd
cur = conn.cursor()  #creation d'un curseur
#creation de deux tables dans ma bd
cur.execute("CREATE TABLE IF NOT EXISTS PARRAIN_MARRAINE(Matricule TEXT PRIMARY KEY, Nom TEXT, Prenom TEXT, Classe TEXT);") #création de la table  avec ses colonnes
conn.commit()
cur.execute("CREATE TABLE IF NOT EXISTS FILEULE(Id_fileule TEXT PRIMARY KEY,Matricule TEXT, Nom_F TEXT, Prenom_F TEXT, Classe_F TEXT, FOREIGN KEY(Matricule) REFERENCES PARRAIN_MARRAINE(Matricule));") #création de la table  avec ses colonnes
conn.commit()



class Ui_MainWindow(object): # debut de style de l'interface d'accueil de l'appli
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(956, 662)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.bg_frame = QtWidgets.QFrame(self.centralwidget)
        self.bg_frame.setGeometry(QtCore.QRect(80, 110, 841, 451))
        self.bg_frame.setStyleSheet("QFrame#bg_frame{\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(116, 0, 81, 255), stop:1 rgba(102, 64, 255, 255));\n"
"border-radius:40px;}")
        self.bg_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.bg_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.bg_frame.setObjectName("bg_frame")
        
        self.app_name = QtWidgets.QLabel(self.bg_frame)
        self.app_name.setGeometry(QtCore.QRect(280, 110, 371, 81))
        self.app_name.setStyleSheet("font: 50pt \"Forte\";")
        self.app_name.setObjectName("app_name")
        
        self.sml_messag = QtWidgets.QLabel(self.bg_frame)
        self.sml_messag.setGeometry(QtCore.QRect(320, 180, 181, 30))
        self.sml_messag.setStyleSheet("font: 27 italic 12pt \"Gill Sans Nova Light\";")
        self.sml_messag.setObjectName("sml_messag")
        
        self.butt_entrer = QtWidgets.QPushButton(self.bg_frame)
        self.butt_entrer.setGeometry(QtCore.QRect(370, 360, 111, 21))
        self.butt_entrer.setMaximumSize(QtCore.QSize(111, 23))
        self.butt_entrer.setStyleSheet("QPushButton{\n"
"color:qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(106, 0, 91, 255), stop:1 rgba(100, 60, 255, 255));\n"
"border-radius: 10px;\n"
"background-color:white;\n"
"font:10pt \"Verdana Pro Semibold\";\n"
"padding:18px;\n"
"}\n"
"QPushButton:hover{\n"
"border-top-color:#084870;\n"
"background:white;\n"
"color:#c910c9;\n"
"}\n"
"QPushButton:active{\n"
"border-top-color:#409ad6;\n"
"background:white;\n"
"}"
"")
        self.butt_entrer.setObjectName("butt_entrer")
        MainWindow.setCentralWidget(self.centralwidget)
        
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.pushButton = QtWidgets.QPushButton(self.bg_frame)
        self.pushButton.setGeometry(QtCore.QRect(770, 10, 31, 23))
        self.pushButton.setStyleSheet("background:transparent;")
        self.pushButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/C:/Users/Aude KOUASSY/Desktop/icones/effacer.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon)
        self.pushButton.setObjectName("pushButton")
        


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
#fin du style de l'interface d'acceuil de l'appli

    def retranslateUi(self, MainWindow):  #noms des widgets de mon interface
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowFlag(QtCore.Qt.FramelessWindowHint)
        MainWindow.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        MainWindow.setWindowTitle(_translate("MainWindow", "Bienvenu(e) sur Bino\'App"))
        self.app_name.setText(_translate("MainWindow", "Bino\'App"))
        self.sml_messag.setText(_translate("MainWindow", "Le binômage devient plus facile."))
        self.butt_entrer.setText(_translate("MainWindow", "Entrer"))

#le vrai main de l'application

import sys

def modification():
    form_set.show()


#creation d'une instance de QApplication   
app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)

part1 = QtWidgets.QDialog()
p1 = part1Dialog()
p1.setupUi(part1)

home_par = QtWidgets.QDialog()
hpar = menu_par()
hpar.setupUi(home_par)

home_fil = QtWidgets.QDialog()
hfil = menu_fil()
hfil.setupUi(home_fil)

part2 = QtWidgets.QDialog()
ajoutpar = part2Dialog()
ajoutpar.setupUi(part2)

part3 = QtWidgets.QDialog()
ajoutfil = part3Dialog()
ajoutfil.setupUi(part3)

modif_par = QtWidgets.QDialog()
mopar = m_par()
mopar.setupUi(modif_par)

supp_par = QtWidgets.QDialog()
supar = s_par()
supar.setupUi(supp_par)

modif_fil = QtWidgets.QDialog()
mofil = m_fil()
mofil.setupUi(modif_fil)

supp_fil = QtWidgets.QDialog()
sufil = s_fil()
sufil.setupUi(supp_fil)

form_set = QtWidgets.QDialog()
setter = setter_page()
setter.setupUi(form_set)

affichage_binomag = QtWidgets.QDialog()
list_bin = Ui_Dialog()
list_bin.setupUi(affichage_binomag)

# classe qui gère les mouvements dans la bd.  ex:modifier,supprimer...
class parrain():
    def add_parrain():

        m = ajoutpar.lineEdit_mat.text()
        n = ajoutpar.lineEdit_nom.text()
        p = ajoutpar.lineEdit_pre.text()
        c = ajoutpar.lineEdit_class.text()
        
        if len(m) == 0 or len(n) == 0 or len(p) == 0 or len(c) == 0:
            ajoutpar.message.setText("Veuillez renseigner tous les champs.")
            
        elif ajoutpar.valider.clicked and len(m) != 0 and len(n) != 0 and len(p) != 0 and len(c) != 0:
            
            m = m.upper()
            Liste = []
            cur.execute("SELECT Matricule FROM PARRAIN_MARRAINE")
            recup = cur.fetchall()  # variable qui stocke tous les matricules ds parrains de ma bd
            
            for un_truc in recup:
                Liste.append(un_truc)
            #methode pour rendre en liste le tuple recup
            L = [i for el in Liste for i in el] #list comprehension
            
            if m in L:
                ajoutpar.message.setText("Ce matricule a déjà été inséré.")

            else:
                
                ajoutpar.message.setText("Enregistrement effectué avec succès")
                #ls caracteres des infos insérées
                n = n.upper()
                p = p.capitalize()
                c = c.upper()
                
                cur.execute("INSERT INTO PARRAIN_MARRAINE VALUES(?,?,?,?)",(m,n,p,c))       
                conn.commit()
                
                #vider les champs remplis
                m = ajoutpar.lineEdit_mat.clear()
                n = ajoutpar.lineEdit_nom.clear()
                p = ajoutpar.lineEdit_pre.clear()
                c = ajoutpar.lineEdit_class.clear()
                
    def set_parrain():
        
        #global new_n, new_p,new_c
        m = mopar.lineEdit.text()
        if len(m) == 0 :
            mopar.message.setText("Veuillez renseigner le matricule à modifier.")
            
        elif mopar.valider.clicked and len(m) != 0:

            #ls caracteres et styles des infos insérées
            m = m.upper()
            Liste = []
            cur.execute("SELECT Matricule FROM PARRAIN_MARRAINE")
            recup = cur.fetchall()  # variable qui stocke tous les matricules de ma bd
            
            for truc in recup:
                Liste.append(truc)
            #methode pour rendre en liste le tuple recup
            L = [x for el in Liste for x in el] #list comprehension
            
            if m not in L:
                mopar.message.setText("Matricule non trouvé.")
            
            else:
            
                modification()
                
                def modif():
                    new_n = setter.lineEdit_nom.text()
                    new_c = setter.lineEdit_class.text()
                    new_p = setter.lineEdit_pre.text()
                    
                    if len(new_n) == 0 or len(new_p) == 0 or len(new_c) == 0 :
                        setter.message.setText("Veuillez renseigner tous les champs.")
                    
                    elif setter.valider.clicked and len(new_n) != 0 and len(new_p) != 0 and len(new_c) != 0:
                        
                        new_n = new_n.upper()
                        new_c = new_c.upper()
                        new_p = new_p.capitalize()
                        
                        cur.execute("UPDATE PARRAIN_MARRAINE SET Nom= ? WHERE Matricule = ? ", (new_n,m))
                        conn.commit()
                    
                        cur.execute("UPDATE PARRAIN_MARRAINE SET Prenom= ? WHERE Matricule = ? ", (new_p,m))
                        conn.commit()
                   
                        cur.execute("UPDATE PARRAIN_MARRAINE SET Classe= ? WHERE Matricule = ? ", (new_c,m))
                        conn.commit()
                    
                        new_n = setter.lineEdit_nom.clear()
                        new_p = setter.lineEdit_pre.clear()
                        new_c = setter.lineEdit_class.clear()
                        setter.message.setText("Modification effectuée avec succès.")
                setter.valider.clicked.connect(modif)
                
                
                #vider les champs remplis
                
            
            
    def del_parrain():
                
        m = supar.lineEdit.text()
        if len(m) == 0 :
            supar.message.setText("Veuillez renseigner le matricule à supprimer.")
            
        elif supar.valider.clicked and len(m) != 0:
            supar.message.setText("Suppression effectuée avec succès!!")            
        #ls caracteres et styles des infos insérées
            m = m.upper()
            Liste = []
            cur.execute("SELECT Matricule FROM PARRAIN_MARRAINE")
            recup = cur.fetchall()
            
            for truc in recup:
                Liste.append(truc)
            #methode pour rendre en liste le tuple recup
            L = list(sum(Liste,()))
            print(L)

            if m not in L:
                supar.message.setText("Matricule non trouvé.")
            
            else: 
                cur.execute("DELETE FROM PARRAIN_MARRAINE WHERE Matricule = ? ", (m,))
                conn.commit()
                supar.message.setText("Suppression effectuée avec succès")

                
                #vider les champs remplis
                m = supar.lineEdit.clear()

# classe qui gère les mouvements dans la bd.  ex:ajouter,supprimer...
class filleul:
    def add_filleul():
        
        m = ajoutfil.lineEdit_mat.text()
        n = ajoutfil.lineEdit_nom.text()
        p = ajoutfil.lineEdit_pre.text()
        c = ajoutfil.lineEdit_class.text()
        
        if len(m) == 0 or len(n) == 0 or len(p) == 0 or len(c) == 0:
            ajoutfil.message.setText("Veuillez renseigner tous les champs.")
            
        elif ajoutfil.valider.clicked and len(m) != 0 and len(n) != 0 and len(p) != 0 and len(c) != 0:
           
            m = m.upper()
            Liste = []
            cur.execute("SELECT Id_fileule FROM FILEULE")
            recup = cur.fetchall()  # variable qui stocke tous les matricules ds filleuls de ma bd
            
            for un_truc in recup:
                Liste.append(un_truc)
            #methode pour rendre en liste le tuple recup
            L = [i for element in Liste for i in element] #list comprehension
            
            if m in L:
                ajoutfil.message.setText("Ce matricule a déjà été inséré.")
            else:
                
                ajoutfil.message.setText("Enregistrement effectué avec succès")  
            #ls caracteres et styles des infos insérées
                n = n.upper()
                p = p.capitalize()
                c = c.upper()
                
                #comme il s'agit d'une relation de type 1,n entre les tables de notre SII il y a 5 colonnes dans la table FILEULE alors je vais faire un tri dans une liste qui va stocker tous les matricules des parrains de ma bd et selectionner un pour y insérer en mm tmps qu'un filleul valide ses infos personnelles
                search_all_parrains = []
                cur.execute("SELECT Matricule FROM PARRAIN_MARRAINE")
                je_recueille = cur.fetchall()  # variable qui stocke tous les matricules de ma bd
                
                for chose in je_recueille:
                    search_all_parrains.append(chose)
                    
                #methode pour rendre en liste le tuple 'je_recueille'
                L = list(sum(search_all_parrains,()))
                Son_parrain = random.choice(L)
                Son_parrain = Son_parrain.upper()
                
                cur.execute("INSERT INTO FILEULE VALUES(?,?,?,?,?)",(m,Son_parrain,n,p,c))       
                conn.commit()
                
                #vider les champs remplis
                m = ajoutfil.lineEdit_mat.clear()
                n = ajoutfil.lineEdit_nom.clear()
                p = ajoutfil.lineEdit_pre.clear()
                c = ajoutfil.lineEdit_class.clear()
                
    def set_filleul():
        
        Id = mofil.lineEdit.text()
        
        if len(Id) == 0 :
            mofil.message.setText("Veuillez renseigner le matricule à modifier.")
            
        elif mofil.valider.clicked and len(Id) != 0:   
   
            Id = Id.upper()
            Liste = []
            cur.execute("SELECT Id_fileule FROM FILEULE")
            req = cur.fetchall()  # variable qui stocke tous les matricules de ma bd
            
            for chose in req:
                Liste.append(chose)
            #methode pour rendre en liste le tuple req
            L = list(sum(Liste,()))
            
            if Id not in L:
                mofil.message.setText("Matricule non trouvé.")
            
            else:
                modification()
                def modif():
                    new_n = setter.lineEdit_nom.text()
                    new_c = setter.lineEdit_class.text()
                    new_p = setter.lineEdit_pre.text()
                    
                    if len(new_n) == 0 or len(new_p) == 0 or len(new_c) == 0 :
                        setter.message.setText("Veuillez renseigner tous les champs.")
                    
                    elif setter.valider.clicked and len(new_n) != 0 and len(new_p) != 0 and len(new_c) != 0:
                        
                        new_n = new_n.upper()
                        new_p = new_p.capitalize()
                        new_c = new_c.upper()
                        
                        
                        cur.execute("UPDATE FILEULE SET Nom_F = ? WHERE Id_fileule = ? ", (new_n,Id))
                        conn.commit()
                    
                        cur.execute("UPDATE FILEULE SET Prenom_F = ? WHERE Id_fileule = ? ", (new_p,Id))
                        conn.commit()
                   
                        cur.execute("UPDATE FILEULE SET Classe_F = ? WHERE Id_fileule = ? ", (new_c,Id))
                        conn.commit()
                    
                        #vider les champs remplis
                        new_n = setter.lineEdit_nom.clear()
                        new_p = setter.lineEdit_pre.clear()
                        new_c = setter.lineEdit_class.clear()
                        setter.message.setText("Modification effectuée avec succès.")
                setter.valider.clicked.connect(modif)
                
            
    def del_filleul():
                
        Id = sufil.lineEdit.text()
        
        if len(Id) == 0 :
            sufil.message.setText("Veuillez renseigner le matricule à supprimer.")
            
        elif sufil.valider.clicked and len(Id) != 0 :
               
            Id = Id.upper()
            Liste = []
            cur.execute("SELECT Id_fileule FROM FILEULE")
            req = cur.fetchall()
            
            for chose in req:
                Liste.append(chose)
            #methode pour rendre en liste le tuple req
            L = list(sum(Liste,())) 

            if Id not in L:
                sufil.message.setText("Matricule non trouvé.")
            
            else:    
                cur.execute("DELETE FROM FILEULE WHERE Id_fileule = ? ", (Id,))
                conn.commit()
                sufil.message.setText("Suppression effectuée avec succès")
                #vider les champs remplis
                Id = sufil.lineEdit.clear()
                        
#partie qui affiche les différentes interfaces de l'appli au clic d'un bouton

MainWindow.show()  #montrer la fenetre principale:accueil

def menu(): #fonction pour montrer l'accueil afin de faire des choix
    sortir_complet()
    part1.show()
ui.butt_entrer.clicked.connect(menu) #au clic la fenetre du menu principal s'affiche

def sortir_complet():
    MainWindow.close()
ui.pushButton.clicked.connect(sortir_complet) #pour sortir completement de l'appli

def part1_accueil(): #du menu principal à  l'accueil
    fermer()
    MainWindow.show()
p1.pushButton_4.clicked.connect(part1_accueil)

#naviguer entre les options de la table parrain
def menu_parrain(): #elle permet de montrer les choix dans la table parrain/marraine
    fermer()
    home_par.show()
p1.pushButton.clicked.connect(menu_parrain) #au clic la fenetre du menu sur les choix du parrain s'affiche

def fermer():   #fermer le menu des choix généraux
    part1.close()
p1.pushButton_5.clicked.connect(fermer)

def ajout_parrain(): #afficher l'interface d'ajout d'infos parrain
    sortir_parrain()
    part2.show()
hpar.pushButtonpar.clicked.connect(ajout_parrain) #au clic la fenetre du menu sur les choix du parrain s'affiche

def modif_parrain(): #afficher l'interface de modification d'infos parrain
    sortir_parrain()
    modif_par.show()
hpar.pushButton_2.clicked.connect(modif_parrain)

def supp_parrain(): #afficher l'interface de suppression d'infos parrain
    sortir_parrain()
    supp_par.show() 
hpar.pushButton_3.clicked.connect(supp_parrain)

def sortir_parrain(): #fermer l'interface du menu parrain
    home_par.close()
hpar.pushButton_7.clicked.connect(sortir_parrain)

def sortir_ajout_parrain():
    part2.close()
ajoutpar.pushButton_7.clicked.connect(sortir_ajout_parrain)  #fermer l'interface d'ajout d'infos parrain

def sortir_modif_parrain():
    modif_par.close()
mopar.pushButton_7.clicked.connect(sortir_modif_parrain)  #fermer l'interface de modification d'infos parrain

def sortir_supp_parrain():
    supp_par.close()
supar.pushButton_7.clicked.connect(sortir_supp_parrain)  #fermer l'interface de suppression d'infos parrain

ajoutpar.valider.clicked.connect(parrain.add_parrain) #bouton qui execute l'enregistrement des infos d'un parrain
supar.valider.clicked.connect(parrain.del_parrain) #bouton qui execute la suppression des infos d'un parrain
mopar.valider.clicked.connect(parrain.set_parrain) #bouton qui execute la modification des infos d'un parrain


#naviguer entre les options de la table filleul
hfil.pushButton_6.clicked.connect(menu)
def menu_filleul():
    fermer()
    home_fil.show()
p1.pushButton_2.clicked.connect(menu_filleul) #au clic la fenetre du menu sur les choix du filleul s'affiche

def ajout_filleul(): #afficher l'interface d'ajout d'infos filleul
    sortir_filleul()
    part3.show()
hfil.pushButton.clicked.connect(ajout_filleul)

def modif_filleul(): #afficher l'interface de modification d'infos filleul
    sortir_filleul()
    modif_fil.show()
hfil.pushButton_2.clicked.connect(modif_filleul)

def supp_filleul(): #afficher l'interface de suppression d'infos filleul 
    sortir_filleul()
    supp_fil.show()
hfil.pushButton_3.clicked.connect(supp_filleul)

def sortir_filleul(): #fermer l'interface du menu filleul
    home_fil.close()
hfil.pushButton_7.clicked.connect(sortir_filleul)

def sortir_ajout_filleul():
    part3.close()
ajoutfil.pushButton_7.clicked.connect(sortir_ajout_filleul)  #fermer l'interface d'ajout d'infos filleul

def sortir_modif_filleul():
    modif_fil.close()
mofil.pushButton_7.clicked.connect(sortir_modif_filleul)  #fermer l'interface de modification d'infos filleul

def sortir_supp_filleul():
    supp_fil.close()
sufil.pushButton_7.clicked.connect(sortir_supp_filleul)  #fermer l'interface de suppression d'infos filleul

ajoutfil.valider.clicked.connect(filleul.add_filleul)  #bouton qui execute l'enregistrement des infos d'un filleul
mofil.valider.clicked.connect(filleul.set_filleul)  #bouton qui execute la modification des infos d'un filleul
sufil.valider.clicked.connect(filleul.del_filleul)  #bouton qui execute la suppression des infos d'un filleul

def affich_binome():  #affiche l'interface de la liste des binomages
    fermer()
    affichage_binomag.show()
p1.pushButton_3.clicked.connect(affich_binome)

def sortir_binome():  #fermer l'interface de la liste des binomages
    affichage_binomag.close()
list_bin.sortir.clicked.connect(sortir_binome)

def list_bin_accueil(): #de l'affiche de la liste de binomage à l'accueil
    sortir_binome()
    MainWindow.show()
list_bin.acceuil.clicked.connect(list_bin_accueil)

def ajoutfil_accueil():  #de l'interface d'ajout filleul à l'accueil
    part3.close()
    MainWindow.show() 
ajoutfil.pushButton_6.clicked.connect(ajoutfil_accueil)

def mofil_accueil(): #de l'interface de modification filleul à l'accueil
    modif_fil.close()
    MainWindow.show() 
mofil.pushButton_6.clicked.connect(mofil_accueil)

def sufil_accueil():  #de l'interface de suppression filleul à l'accueil
    supp_fil.close()
    MainWindow.show() 
sufil.pushButton_6.clicked.connect(sufil_accueil)

def ajoutpar_accueil():  #de l'interface d'ajout parrain à l'accueil
    part2.close()
    MainWindow.show() 
ajoutpar.pushButton_6.clicked.connect(ajoutpar_accueil)

def mopar_accueil():  #de l'interface de modification parrain à l'accueil
    modif_par.close()
    MainWindow.show() 
mopar.pushButton_6.clicked.connect(mopar_accueil)

def supar_accueil():  #de l'interface de suppression parrain à l'accueil
    supp_par.close()
    MainWindow.show() 
supar.pushButton_6.clicked.connect(supar_accueil)

def setter_sortir(): # fermeture de l'interface de modification des infos 
    form_set.close()
setter.pushButton_7.clicked.connect(setter_sortir)
    
def setter_accueil(): #de l'interface de modification des infos à l'accueil
    setter_sortir()
    MainWindow.show()
setter.pushButton_6.clicked.connect(setter_accueil)


sys.exit(app.exec_()) #execution de l'appli